@page "/FirstPartItemRelated/{CanEditFlag?}"
@*@attribute [Authorize(Roles = "admin, superuser")]*@
@namespace MFBAdminMBlazorServer.Pages

@using MFBAdminMBlazorServer.Helpers
@using MFBAdminMBlazorServer.Models
@inject MFBAdminMBlazorServer.Services.IFirstPartItemService fpiService
@inject MFBAdminMBlazorServer.Services.IFirstPartItemListService fpilService
@inject ISnackbar Snackbar
@*<h5>Пункты первой части</h5>*@

@Summary


@*<AuthorizeView>
  <Authorized>*@
@if (ronly == false)
{
  <MudExpansionPanels MultiExpansion="true">
    <MudExpansionPanel>
      <TitleContent>
        <div class="d-flex">
          <MudIcon Icon="@Icons.Material.Filled.Create" class="mr-3"></MudIcon>
          <MudText>Создать</MudText>
        </div>
      </TitleContent>
      <ChildContent>
        <MudTr>
          <MudTd><MudTextField @bind-Value="fpi.RegulationCode" Label="Regulation Code" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField></MudTd>
          <MudTd><MudTextField @bind-Value="fpi.Seq" Label="Seq" InputType="@MudBlazor.InputType.Number" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField></MudTd>
          <MudTd><MudTextField @bind-Value="fpi.ItemCode" Label="Code" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField></MudTd>
          <MudTd>
            <MudSelect Label="Выбор флага" @bind-Value="fpi.ItemShowFlags" Variant="Variant.Outlined" Dense="true">
              <MudSelectItem Value="@(0)" Disabled="false">0.Выводить все</MudSelectItem>
              <MudSelectItem Value="@(1)">1.Не показывать publish_moment</MudSelectItem>
              <MudSelectItem Value="@(2)">2.Не показывать диапазон действия</MudSelectItem>
              <MudSelectItem Value="@(3)">3.Не показывать publish_moment + диапазон действия</MudSelectItem>
              <MudSelectItem Value="@(4)">4.Не показывать архивные данные</MudSelectItem>
              <MudSelectItem Value="@(5)">5.Не показывать publish_moment + архивные данные</MudSelectItem>
              <MudSelectItem Value="@(6)">6.Не показывать диапазон действия date_from date_to + архивные данные</MudSelectItem>
              <MudSelectItem Value="@(7)">7.Ничего не показывать</MudSelectItem>
            </MudSelect>
            @*<MudTextField @bind-Value="fpi.ItemShowFlags" Label="Show Flags" InputType="@MudBlazor.InputType.Number" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>*@
          </MudTd>
          <MudTd>
            <MudSelect Label="Статус" @bind-Value="fpi.Status" Variant="Variant.Outlined" Dense="true">
              <MudSelectItem Value="@(0)" Disabled="false">0.Действующий показатель</MudSelectItem>
              <MudSelectItem Value="@(1)">1.Архивный показатель</MudSelectItem>
              <MudSelectItem Value="@(2)">2.Удаленный пункт</MudSelectItem>
            </MudSelect>
          </MudTd>
          @*<MudTd><MudTextField @bind-Value="fpi.Status" Label="Status" InputType="@MudBlazor.InputType.Number" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField></MudTd>*@
        </MudTr>
        <MudTr>
          <MudTd colspan="5">
            <MudTextField @bind-Value="fpi.ItemDescription" Label="Description" Variant="Variant.Outlined" Margin="Margin.Normal" Lines="5"></MudTextField>
            @*<MudPopover Open="@_isOpen" Class="px-4 pt-4">
                <div class="d-flex flex-column">
                  <MudText>Content of the popover can be anything.</MudText>
                  <MudButton OnClick="@ToggleOpen" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
                </div>
              </MudPopover>*@
          </MudTd>
        </MudTr>
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Сохранить</MudButton>

      </ChildContent>
    </MudExpansionPanel>
    <MudExpansionPanel>
      <TitleContent>
        <div class="d-flex">
          <MudIcon Icon="@Icons.Material.Filled.Segment" class="mr-3"></MudIcon>
          <MudText>Создать дочерние</MudText>
        </div>
      </TitleContent>
      <ChildContent>
        <MudTr>
          @**Selector DDL*@
          <MudTd>
            <MudSelect Label="Пункт" Variant="Variant.Outlined" @bind-Value="fpil.Idp" Margin="Margin.Normal">
              @foreach (MfbDisclosureFirstPartItem item in fpis)
  {
  <MudSelectItem Value="@item.Id">@item.ItemCode</MudSelectItem>
}
            </MudSelect>
          </MudTd>
          @*<MudTd><MudTextField @bind-Value="fpil.Idp" Label="Idp" InputType="@MudBlazor.InputType.Number" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField></MudTd>*@

          @*<MudDatePicker @bind-Value="fpil.PublishMoment" Label="PublishMoment" Margin="Margin.Normal"></MudDatePicker>*@
          <MudTd>
            <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Date" @bind-Date="@pDateSave" Required></MudDatePicker> @*@onchange="@((ChangeEventArgs e) => pDate = (DateTime)e.Value)" *@
            <MudTimePicker PickerVariant="PickerVariant.Dialog" Label="Time" @bind-Time="@pTimeSave" Required /> @* Get time from DB PublishMoment.Value*@
          </MudTd>
          <MudTd>
            <MudDatePicker @bind-Value="fpil.DateFrom" Label="From" Margin="Margin.Normal"></MudDatePicker>
            <MudDatePicker @bind-Value="fpil.DateTo" Label="To" Margin="Margin.Normal"></MudDatePicker>
          </MudTd>
        </MudTr>
        <MudTr>
          <MudTd><MudTextField @bind-Value="fpil.ItemListCategory" Label="Category" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField></MudTd>
          <MudTd><MudTextField @bind-Value="fpil.Memo" Label="Memo" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField></MudTd>
          <MudTd>
            <MudSelect Label="Status" @bind-Value="fpil.Status" Variant="Variant.Outlined" Dense="true">
              <MudSelectItem Value="@(0)">0.Действующий показатель</MudSelectItem>
              <MudSelectItem Value="@(1)">1.Архивный показатель</MudSelectItem>
              <MudSelectItem Value="@(2)">2.Удаленный пункт</MudSelectItem>
            </MudSelect>
            @*<MudTextField @bind-Value="fpil.Status" Label="Status" InputType="@MudBlazor.InputType.Number" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>*@
          </MudTd>
          <MudTd><MudTextField @bind-Value="fpil.Seq" Label="Seq" InputType="@MudBlazor.InputType.Number" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField></MudTd>
        </MudTr>
        <MudTr>
          <MudTd><MudTextField @bind-Value="fpil.ItemListDesc" Label="Desc" Variant="Variant.Outlined" Margin="Margin.Normal" Lines="1"></MudTextField></MudTd>
          <MudTd colspan="2"><MudTextField @bind-Value="fpil.ItemListValue" Label="Value" Variant="Variant.Outlined" Margin="Margin.Normal" Lines="1"></MudTextField></MudTd>
          <MudTd>
            @*fpil.ItemListType  typeof(int?)*@
            @*<MudSelect Label="Type" @bind-Value="fpil.ItemListType" Variant="Variant.Outlined" Dense="true">
              <MudSelectItem Value="@(0)">Прямая ссылка</MudSelectItem>
              <MudSelectItem Value="@(1)">Ссылка с текстом</MudSelectItem>
              <MudSelectItem Value="@(2)">Статический текст</MudSelectItem>
                </MudSelect>*@
            <MudTextField @bind-Value="fpil.ItemListType" Label="Type" InputType="@MudBlazor.InputType.Number" Variant="Variant.Outlined" Margin="Margin.Normal"></MudTextField>
          </MudTd>
        </MudTr>
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="SaveChild">Сохранить</MudButton>

      </ChildContent>
    </MudExpansionPanel>
  </MudExpansionPanels>
  <br />
}
@*</Authorized>
  </AuthorizeView>*@
<MudTable Items="@RelatedTables2"
          Dense="@dense"
          Hover="true"
          ReadOnly="@ronly"
          Filter="new Func<FirstPartItemShowChild, bool>(FilterFunc)"
          @bind-SelectedItem="selectedItem"
          SortLabel="Сортировка по"
          CommitEditTooltip="Подтвердить редактирование"
          OnCommitEditClick="@(()=>CommitEditClick(@selectedItem.Id))"
          FixedHeader="@fixed_header" Height="@(fixed_header?"600px":"")"
          Breakpoint="Breakpoint.Sm">
  <ToolBarContent>
    <MudText Typo="Typo.h6">Элементы первой части</MudText>
    <MudToolBarSpacer />
    <MudTextField @bind-Value="searchString" Placeholder="Поиск" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
  </ToolBarContent>
  <ColGroup>
    <col style="width:50px;" />
    <col style="width:20px;" />
    <col style="width:30px;" />
    <col style="width:30px;" />
    <col />
    <col style="width:10px;" />
    <col style="width:10px;" />
  </ColGroup>
  <HeaderContent>
    <MudTh></MudTh>
    <MudTh><MudTableSortLabel SortBy="new Func<FirstPartItemShowChild, object>(x=>x.RegulationCode)">RegCode</MudTableSortLabel></MudTh>
    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<FirstPartItemShowChild, object>(x=>x.Seq)">Seq</MudTableSortLabel></MudTh>
    <MudTh><MudTableSortLabel SortBy="new Func<FirstPartItemShowChild, object>(x=>x.ItemCode)">Code</MudTableSortLabel></MudTh>
    <MudTh>Description</MudTh>
    <MudTh><MudTableSortLabel SortBy="new Func<FirstPartItemShowChild, object>(x=>x.ItemShowFlags)">ShowFlags</MudTableSortLabel></MudTh>
    <MudTh><MudTableSortLabel SortBy="new Func<FirstPartItemShowChild, object>(x=>x.Status)">Status</MudTableSortLabel></MudTh>
  </HeaderContent>
  <RowTemplate>
    <MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress(context.Id))">@((context.ShowChild == true)? "Скрыть" : "Показать")</MudButton></MudTd>
    <MudTd DataLabel="RegulationCode">@context.RegulationCode</MudTd>
    <MudTd DataLabel="Seq">@context.Seq</MudTd>
    <MudTd DataLabel="ItemCode">@context.ItemCode</MudTd>
    <MudTd DataLabel="ItemDescription">@context.ItemDescription</MudTd>
    <MudTd DataLabel="ItemShowFlags">@context.ItemShowFlags</MudTd>
    <MudTd DataLabel="Status">@context.Status</MudTd>
  </RowTemplate>
  <RowEditingTemplate>
    @*<MudTd DataLabel="Id">@context.Id</MudTd>*@
    <MudTd></MudTd>
    <MudTd DataLabel="RegulationCode">
      <MudTextField @bind-Value="@context.RegulationCode" Required />
    </MudTd>
    <MudTd DataLabel="Seq">
      <MudTextField InputType="@MudBlazor.InputType.Number"
                    @bind-Value="@context.Seq"
                    Validation="@(new Func<int?, IEnumerable<string>>(FieldValidation.SeqFpiCheck))"
                    HelperText="Сортировка"
                    Required />
    </MudTd>
    <MudTd DataLabel="ItemCode">
      <MudTextField @bind-Value="@context.ItemCode" Required />
    </MudTd>
    <MudTd DataLabel="ItemDescription">
      <MudTextField @bind-Value="@context.ItemDescription" Lines="4" Variant="Variant.Outlined" Required />
    </MudTd>
    <MudTd DataLabel="ItemShowFlags">
      <MudSelect Label="Выбор флага" @bind-Value="@context.ItemShowFlags" Variant="Variant.Outlined" HelperText="Битовая маска" Dense="true">
        <MudSelectItem Value="@(0)" Disabled="false">0.Выводить все</MudSelectItem>
        <MudSelectItem Value="@(1)">1.Не показывать publish_moment</MudSelectItem>
        <MudSelectItem Value="@(2)">2.Не показывать диапазон действия</MudSelectItem>
        <MudSelectItem Value="@(3)">3.Не показывать publish_moment + диапазон действия</MudSelectItem>
        <MudSelectItem Value="@(4)">4.Не показывать архивные данные</MudSelectItem>
        <MudSelectItem Value="@(5)">5.Не показывать publish_moment + архивные данные</MudSelectItem>
        <MudSelectItem Value="@(6)">6.Не показывать диапазон действия date_from date_to + архивные данные</MudSelectItem>
        <MudSelectItem Value="@(7)">7.Ничего не показывать</MudSelectItem>
      </MudSelect>
      @*<MudTextField InputType="@MudBlazor.InputType.Number" @bind-Value="@context.ItemShowFlags" HelperText="Битовая маска" Required />*@
    </MudTd>
    <MudTd DataLabel="Status">
      <MudSelect Label="Статус" @bind-Value="@context.Status" Variant="Variant.Outlined" HelperText="int" Dense="true">
        <MudSelectItem Value="@(0)" Disabled="false">0.Действующий показатель</MudSelectItem>
        <MudSelectItem Value="@(1)">1.Архивный показатель</MudSelectItem>
        <MudSelectItem Value="@(2)">2.Удаленный пункт</MudSelectItem>
      </MudSelect>
      @*<MudTextField InputType="@MudBlazor.InputType.Number" @bind-Value="@context.Status" />*@
    </MudTd>
    <MudTd DataLabel="">
      <MudFab @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
    </MudTd>
  </RowEditingTemplate>

  <ChildRowContent>
    @if (context.ShowChild)
{
<MudTr>
  <td colspan="7">
    <MudCard Elevation="0">
      <MudCardHeader>
        <CardHeaderContent>
          <MudText Typo="Typo.body1">Дочерняя таблица для <strong>@context.ItemCode</strong></MudText>
        </CardHeaderContent>
      </MudCardHeader>
      <MudCardContent Class="pa-0">
        <MudTable Items="@context.MfbDisclosureFirstPartItemLists"
                  Context="fpil"
                  Dense="@dense"
                  Hover="@hover"
                  ReadOnly="@ronly"
                  Breakpoint="Breakpoint.Sm"
                  Elevation="0"
                  @bind-SelectedChildItem="selectedChildItem"
                  CommitEditTooltip="Подтвердить редактирование"
                  OnCommitEditClick="@(()=>CommitEditChildClick(context.Id))">
          <ColGroup>
            <col style="width:20px;" />
            <col style="width:40px;" />
            <col />
            <col style="width:40px;" />
            <col />
            <col />
            <col style="width:10px;" />
            <col style="width:10px;" />
            <col style="width:70px;" />
            <col style="width:60px;" />
          </ColGroup>
          <HeaderContent>
            <MudTh>Seq</MudTh>
            <MudTh>PublishMoment</MudTh>
            <MudTh>DateFrom</MudTh>
            <MudTh>DateTo</MudTh>
            <MudTh>Desc</MudTh>
            <MudTh>Value</MudTh>
            <MudTh>Type</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Category</MudTh>
            <MudTh>Memo</MudTh>
          </HeaderContent>
          <RowTemplate>
            <MudTd DataLabel="Seq">@fpil.Seq</MudTd>
            <MudTd DataLabel="PublishMoment">@FieldFormatter.FormatDateTime(fpil.PublishMoment)</MudTd>
            <MudTd DataLabel="DateFrom">@FieldFormatter.FormatDateTime(fpil.DateFrom)</MudTd>
            <MudTd DataLabel="DateTo"> @FieldFormatter.FormatDateTime(fpil.DateTo)</MudTd>
            <MudTd DataLabel="ItemListDesc">@fpil.ItemListDesc</MudTd>
            <MudTd DataLabel="ItemListValue"><MudLink Href="@fpil.ItemListValue">@fpil.ItemListValue</MudLink></MudTd>
            <MudTd DataLabel="ItemListType">@fpil.ItemListType</MudTd>
            <MudTd DataLabel="Status">@fpil.Status</MudTd>
            <MudTd DataLabel="ItemListCategory">@fpil.ItemListCategory</MudTd>
            <MudTd DataLabel="Memo">@fpil.Memo</MudTd>
          </RowTemplate>
          <RowEditingTemplate Context="fpil">
            @*<MudTd DataLabel="Id">@context.Id</MudTd>*@
            <MudTd DataLabel="Seq">
              @*<DataAnnotationsValidator></DataAnnotationsValidator>*@
              <MudTextField @bind-Value="@fpil.Seq"
                            Validation="@(new Func<int?, IEnumerable<string>>(FieldValidation.SeqFpiCheck))"
                            HelperText="Сортировка"
                            Required />
            </MudTd>
            <MudTd DataLabel="PublishMoment">
              <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Date" @bind-Date="@pDate"></MudDatePicker>
              <MudTimePicker PickerVariant="PickerVariant.Dialog" Label="Time" @bind-Time="pTime" Required /> @* Get time from DB PublishMoment.Value*@
            </MudTd>
            <MudTd DataLabel="DateFrom">
              <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="From" HelperText="Начало отчетного периода" Date="@fpil.DateFrom" />
            </MudTd>
            <MudTd DataLabel="DateTo">
              <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="To" HelperText="Конец отчетного периода" Date="@fpil.DateTo" />
            </MudTd>
            <MudTd DataLabel="ItemListDesc">
              <MudTextField @bind-Value="@fpil.ItemListDesc" HelperText="Описание ссылки/документа" Required />
            </MudTd>
            <MudTd DataLabel="ItemListValue">
              <MudTextField @bind-Value="@fpil.ItemListValue" HelperText="Ссылка/статик" Required />
            </MudTd>
            <MudTd DataLabel="ItemListType">
              @*<MudSelect Label="ItemListType" @bind-Value="@fpil.ItemListType" Variant="Variant.Outlined" HelperText="int" Dense="true" Required RequiredError="Тип обяателен!">
                  <MudSelectItem Value="@(0)" Disabled="false">0.Прямая ссылка</MudSelectItem>
                  <MudSelectItem Value="@(1)">1.Ссылка с текстом</MudSelectItem>
                  <MudSelectItem Value="@(2)">2.Статический текст</MudSelectItem>
                </MudSelect>*@
              <MudTextField InputType="@MudBlazor.InputType.Number" @bind-Value="@fpil.ItemListType" Required RequiredError="Тип обяателен!" />
            </MudTd>
            <MudTd DataLabel="Status">
              <MudSelect Label="Статус" @bind-Value="@fpil.Status" Variant="Variant.Outlined" HelperText="int" Dense="true" Required RequiredError="Статус обяателен!">
                <MudSelectItem Value="@(0)" Disabled="false">0.Действующий показатель</MudSelectItem>
                <MudSelectItem Value="@(1)">1.Архивный показатель</MudSelectItem>
                <MudSelectItem Value="@(2)">2.Удаленный пункт</MudSelectItem>
              </MudSelect>
              @*<MudTextField InputType="@MudBlazor.InputType.Number" @bind-Value="@fpil.Status" Required RequiredError="Статус обяателен!" />*@
            </MudTd>
            <MudTd DataLabel="ItemListCategory">
              <MudTextField @bind-Value="@fpil.ItemListCategory" HelperText="Категория параметра" />
            </MudTd>
            <MudTd DataLabel="Memo">
              <MudTextField @bind-Value="@fpil.Memo" HelperText="Комментарий" />
            </MudTd>
            <MudTd DataLabel="">
              <MudFab @onclick="@(()=>DeleteChild(fpil.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
          </RowEditingTemplate>
        </MudTable>
      </MudCardContent>
    </MudCard>
  </td>
</MudTr>
}
  </ChildRowContent>
  <PagerContent>
    <MudTablePager PageSizeOptions="new int[]{20, 50, 100}" />
  </PagerContent>
</MudTable>
<MudSwitch @bind-Checked="@hover" Color="Color.Primary">Подсветка выбора</MudSwitch>
<MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Сжатие</MudSwitch>
@if (CanEdit == true)
{
  <MudSwitch @bind-Checked="@ronly" Color="Color.Tertiary">Только чтение</MudSwitch>
}
@*<MudSwitch @bind-Checked="@ronly" Color="Color.Tertiary">Только чтение</MudSwitch>*@
<MudSwitch @bind-Checked="@fixed_header" Color="Color.Primary">Фиксированная высота</MudSwitch>
<MudText Inline="true">Выбранный: @selectedItem?.Id</MudText>

<MudMessageBox @ref="mbox" Title="Внимание" CancelText="Отмена">
  <MessageContent>
    Удаление <b><i>не</i></b> может быть отменено!
  </MessageContent>
  <YesButton>
    <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Удалить!</MudButton>
  </YesButton>
</MudMessageBox>

@if (ronly == false)
{
  <div>
    <ol>
      <li>
        Show flags = битовая маска для отображения списка: <code>
          <br />
          1 – Не показывать publish_moment;<br />
          2 – Не показывать диапазон действия;<br />
          4 – Не показывать архивные данные;<br />
          0 - выводить все;<br />
          7 - ничего, показ только даты опубликования
        </code>
      </li>
      <li>
        Type: <code>
          <br />
          0 - прямая ссылка <br />
          1 - ссылка с текстом <br />
          2 - статический текст
        </code>
      </li>
      <li>
        Status (по умолчанию 0): <code>
          <br />
          0 - действующий показатель; <br />
          1 - архивный показатель; <br />
          2 - удаленный пункт
        </code>
      </li>
    </ol>
  </div>
}

@code{
  [Parameter]
  public string CanEditFlag { get; set; }
  //[Parameter]
  //public string Title { get; set; }
  [Parameter]
  public string Summary { get; set; }

  [Parameter]
  public bool CanEdit { get; set; }

  [Parameter]
  public EventCallback<string> OnClickCallback { get; set; }

  [CascadingParameter]
  private Task<AuthenticationState> authenticationStateTask { get; set; }

  //[Inject] private IDialogService DialogService { get; set; }
  MudMessageBox mbox { get; set; }
  string state = "Окно ещё не появилось";

  DateTime? pDate = new DateTime();
  TimeSpan? pTime = new TimeSpan(08, 30, 00);

  DateTime? pDateSave = new DateTime();
  TimeSpan? pTimeSave = new TimeSpan(08, 30, 00);

  private bool dense = false;
  private bool hover = true;
  private bool ronly = false;

  private bool fixed_header = true;
  private string searchString = "";

  private MfbDisclosureFirstPartItem fpi = new MfbDisclosureFirstPartItem();
  private MfbDisclosureFirstPartItemList fpil = new MfbDisclosureFirstPartItemList();

  private List<MfbDisclosureFirstPartItem> fpis = new List<MfbDisclosureFirstPartItem>();
  private List<MfbDisclosureFirstPartItemList> fpils = new List<MfbDisclosureFirstPartItemList>();

  //public IList<Person> RelatedTables = new List<Person>();

  private IList<FirstPartItemShowChild> RelatedTables2 = new List<FirstPartItemShowChild>();
  private FirstPartItemShowChild fpiShowChild;

  private FirstPartItemShowChild selectedItem = null;
  private MfbDisclosureFirstPartItemList selectedChildItem = null;

  private string user = null;

  public class FirstPartItemShowChild : MfbDisclosureFirstPartItem
  {
    public bool ShowChild { get; set; }

    public FirstPartItemShowChild(MfbDisclosureFirstPartItem parentToCopy)
    {
      this.Id = parentToCopy.Id;
      this.ItemCode = parentToCopy.ItemCode;
      this.ItemDescription = parentToCopy.ItemDescription;
      this.ItemShowFlags = parentToCopy.ItemShowFlags;
      this.Now = parentToCopy.Now;
      this.RegulationCode = parentToCopy.RegulationCode;
      this.Seq = parentToCopy.Seq;
      this.Status = parentToCopy.Status;
      this.Username = parentToCopy.Username;
      this.MfbDisclosureFirstPartItemLists = parentToCopy.MfbDisclosureFirstPartItemLists;

      this.ShowChild = false;
      //this.MobileNumber = string.Empty;// Or any other default.
    }
  }

  protected override async Task OnInitializedAsync()
  {
    if (CanEdit == false) ronly = true; else ronly = false;
    if (CanEditFlag == "true") ronly = false; else if (CanEditFlag == "false") ronly = true;
    //GetFirstPartItems();
    pDate = DateTime.Now;
    pDateSave = DateTime.Now;
    user = GetUserName();
    FillFirstPartItems();
    //FillPeople();
  }

  private void FillFirstPartItems()
  {
    fpis = fpiService.GetFirstPartItems();

    List<FirstPartItemShowChild> fpisWChild = fpis.Select(parent => new FirstPartItemShowChild(parent)).ToList();

    fpils = fpilService.GetFirstPartItemLists();

    List<FirstPartItemShowChild> connectedFPIs = new();
    foreach (var fpi in fpisWChild)
    {
      List<MfbDisclosureFirstPartItemList> connectedFPIl = new();
      foreach (var fpil in fpils)
      {
        if (fpi.Id == fpil.Idp)
          connectedFPIl.Add(fpil);
      } //TODO remake using LINQ
      fpi.MfbDisclosureFirstPartItemLists = connectedFPIl;

      if (fpil == fpils.LastOrDefault())
        fpi.ShowChild = true;
      //fpi.MfbDisclosureFirstPartItemLists = fpils.Where(fpil => fpil.Idp == id);
      connectedFPIs.Add(fpi);
    }
    RelatedTables2 = connectedFPIs;
  }

  private bool FilterFunc(FirstPartItemShowChild element)
  {
    if (string.IsNullOrWhiteSpace(searchString))
      return true;
    if (element.ItemCode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
      return true;
    if (element.ItemDescription.Contains(searchString, StringComparison.OrdinalIgnoreCase))
      return true;
    return false;
  }

  private void CommitEditClick(long id)
  {
    Snackbar.Add("Commit Edit Invoked");
    fpiShowChild = RelatedTables2.FirstOrDefault(c => c.Id == id);

    fpiShowChild.Username = user;
    fpiShowChild.Now = DateTime.Now;

    fpiService.SaveFirstPartItem(fpiShowChild);
    //fpiShowChild = new FirstPartItemShowChild();
    Snackbar.Add("First Part Item Saved.", Severity.Success);
    FillFirstPartItems();

    //spi = spis.FirstOrDefault(c => c.Id == id);
  }

  private void CommitEditChildClick(long id)
  {
    Snackbar.Add("Commit Child Edit Invoked");
    fpil = fpilService.GetFirstPartItemListById(id);
    TimeSpan _time = (TimeSpan)pTime;
    DateTime _date = (DateTime)pDate.Value.Date;

    var pMoment = _date.Add(_time);
    fpil.PublishMoment = pMoment;

    fpil.Username = user;
    fpil.Now = DateTime.Now;

    fpilService.SaveFirstPartItemList(fpil);
    //fpiShowChild = new FirstPartItemShowChild();
    Snackbar.Add("First Part Item Child Saved.", Severity.Success);
    FillFirstPartItems();
  }

  private void ShowBtnPress(long id)
  {
    FirstPartItemShowChild tmpFPI = RelatedTables2.First(f => f.Id == id);
    tmpFPI.ShowChild = !tmpFPI.ShowChild;
  }

  // OLD
  private List<MfbDisclosureFirstPartItem> GetFirstPartItems()
  {
    fpis = fpiService.GetFirstPartItems(); // add async task with await
    return fpis;
  }



  private bool Search(MfbDisclosureFirstPartItem fpi)
  {
    if (string.IsNullOrWhiteSpace(searchString)) return true;
    if (fpi.ItemCode.Contains(searchString, StringComparison.OrdinalIgnoreCase)
        || fpi.ItemDescription.Contains(searchString, StringComparison.OrdinalIgnoreCase)
        || fpi.RegulationCode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
    {
      return true;
    }
    return false;
  }

  private void Save()
  {

    fpi.Username = user;
    fpi.Now = DateTime.Now;
    fpiService.SaveFirstPartItem(fpi);
    fpi = new MfbDisclosureFirstPartItem();
    Snackbar.Add("First Part Item Saved.", Severity.Success);
    //GetFirstPartItems();
    FillFirstPartItems();
  }
  //private void Edit(long id)
  //{
  //  fpi = fpis.FirstOrDefault(c => c.Id == id);
  //}

  private void SaveChild()
  {
    TimeSpan _time = (TimeSpan)pTimeSave;
    DateTime _date = (DateTime)pDateSave.Value.Date;

    var pMoment = _date.Add(_time);
    fpil.PublishMoment = pMoment;

    fpil.Username = user;
    fpil.Now = DateTime.Now;

    fpilService.SaveFirstPartItemList(fpil);
    fpil = new MfbDisclosureFirstPartItemList();
    Snackbar.Add("First Part Item List Saved.", Severity.Success);
    //GetFirstPartItems();
    FillFirstPartItems();
  }


  private void Delete(long id)
  {
    //bool? result = await mbox.Show();
    //state = result == null ? "Cancelled" : "Deleted!";
    //StateHasChanged();

    //if (result == true)
    //{
    fpiService.DeleteFirstPartItem(id);
    Snackbar.Add("First Part Item  Deleted.", Severity.Success);
    //GetFirstPartItems();
    FillFirstPartItems();
    //}
  }

  private void DeleteChild(long id)
  {
    fpilService.DeleteFirstPartItemList(id);
    Snackbar.Add("First Part Item Child Deleted.", Severity.Success);
    //GetFirstPartItems();
    FillFirstPartItems();
  }


  private async Task LogUsername()
  {
    var authState = await authenticationStateTask;
    var user = authState.User;

    if (user.Identity.IsAuthenticated)
    {
      Console.WriteLine($"{user.Identity.Name} is authenticated.");
    }
    else
    {
      Console.WriteLine("The user is NOT authenticated.");
    }
  }

  private string GetUserName()
  {
    var authState = authenticationStateTask;
    var user = authState.Result.User;

    if (user.Identity.IsAuthenticated)
    {
      return user.Identity.Name;
    }
    else
    {
      return null;
    }
  }
}